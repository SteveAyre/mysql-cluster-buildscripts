#!/bin/sh -e

TARGET=${1:-wheezy}

PACKAGE_SOURCE=$( grep ^Source: ${TARGET}/debian/control | awk '{ print $2 }' )
PACKAGE_VERSION=$( dpkg-parsechangelog -l${TARGET}/debian/changelog | grep ^Version: | awk '{ print $2 '} )
VERSION=$( echo $PACKAGE_VERSION | cut -d- -f1 | sed -e s/+dfsg// )
TARBALL=${PACKAGE_SOURCE}_${VERSION}+dfsg.orig.tar.gz
TARBALL_SYMLINK=${PACKAGE_SOURCE}_${VERSION}.orig.tar.gz

# Build test options
# nocheck - skip testing (faster build)
# fulltest - very long testsuite
# leave both commented out for the normal test
# Can be specified at commandline as 2nd parameter
export DEB_BUILD_OPTIONS=${2:-nocheck}
#export DEB_BUILD_OPTIONS=${2:-fulltest}

# Parallel build with cores+1 for faster build
NUM_PROCESSORS=$(( $(nproc) + 1 ))
export DEB_BUILD_OPTIONS="${DEB_BUILD_OPTIONS} parallel=$NUM_PROCESSORS"

# Use ccache if available
if [ `which ccache` ]; then
	export DEB_BUILD_OPTIONS="${DEB_BUILD_OPTIONS} ccache"
fi

# Remove any files from old builds
scripts/clean $TARGET

# Download and extract source
(cd ${TARGET} && debian/rules get-orig-source)
ln -fs ${TARBALL} ${TARBALL_SYMLINK}
tar -C ${TARGET} --strip-components=1 -zxf ${TARBALL_SYMLINK}

# Build package
(cd ${TARGET} && dpkg-buildpackage -uc -us -sa 2>&1 | tee ../build.log)

# Cleanup and done
echo Build complete

